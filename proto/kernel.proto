syntax = "proto3";

package modern.proto;

import "google/protobuf/any.proto";
import "shared_messages.proto"; // Ensure this file defines SimulationEvent

// KernelService defines core simulation lifecycle operations
service KernelService {
  // Initializes a new simulation instance
  rpc InitializeSimulation(InitializeSimulationRequest) returns (InitializeSimulationResponse);

  // Advances simulation time or steps
  rpc RunSimulationStep(RunSimulationStepRequest) returns (RunSimulationStepResponse);

  // Injects an external event into the simulation
  rpc InjectEvent(InjectEventRequest) returns (InjectEventResponse);

  // Gracefully terminates the simulation instance
  rpc TerminateSimulation(TerminateSimulationRequest) returns (TerminateSimulationResponse);
}

// ===== Request/Response Message Definitions =====

// Request to initialize a simulation
message InitializeSimulationRequest {
  string simulation_id = 1;            // Unique simulation session ID
  string kernel_instance_id = 2;       // Instance of the kernel handling the simulation
  string scenario_config = 3;          // JSON or serialized config for scenario
}

// Response to initialization request
message InitializeSimulationResponse {
  string simulation_id = 1;
  string kernel_instance_id = 2;
  bool success = 3;
  string message = 4;                  // Human-readable status
}

// Request to run the simulation until a specific time
message RunSimulationStepRequest {
  string simulation_id = 1;
  string kernel_instance_id = 2;
  double run_until_time = 3;           // Target simulation time
}

// Response after executing a simulation step
message RunSimulationStepResponse {
  string simulation_id = 1;
  string kernel_instance_id = 2;
  double current_simulation_time = 3;  // Updated simulation time
  bool completed = 4;                  // True if simulation reached its end
  bool success = 5;
  string message = 6;
}

// Request to inject an event into a simulation instance
message InjectEventRequest {
  string simulation_id = 1;
  string kernel_instance_id = 2;
  SimulationEvent event = 3;           // Imported from shared_messages.proto
}

// Response after injecting an event
message InjectEventResponse {
  bool success = 1;
  string message = 2;
}

// Request to terminate a simulation instance
message TerminateSimulationRequest {
  string simulation_id = 1;
  string kernel_instance_id = 2;
}

// Response after terminating the simulation
message TerminateSimulationResponse {
  bool success = 1;
  string message = 2;
}
