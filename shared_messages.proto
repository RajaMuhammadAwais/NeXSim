syntax = "proto3";

package modern.proto;

import "google/protobuf/any.proto"; // For generic event data

// Represents a simulation event
message SimulationEvent {
  string event_id = 1;
  double timestamp = 2;
  string target_model_id = 3; // ID of the model instance this event is for
  string source_model_id = 4; // ID of the model instance that sent the event (optional)
  google.protobuf.Any event_data = 5; // The actual event payload (e.g., a packet message)
}

// Request from Kernel to Runtime to load a model
message LoadModelRequest {
  string simulation_id = 1;
  string runtime_instance_id = 2;
  string model_id = 3; // Unique ID for this model instance
  string model_type = 4; // Type of model to load (e.g., "python:MyProtocol", "wasm:router.wasm")
  string model_config = 5; // Configuration specific to this model instance
}

// Response from Runtime after loading a model
message LoadModelResponse {
  string model_id = 1;
  bool success = 2;
  string message = 3;
}

// Request from Kernel to Runtime to handle an event
message HandleEventRequest {
  string simulation_id = 1;
  string runtime_instance_id = 2;
  SimulationEvent event = 3;
}

// Response from Runtime after handling an event
// May include events generated by the model to be scheduled by the kernel
message HandleEventResponse {
  string event_id = 1; // ID of the event that was handled
  bool success = 2;
  string message = 3;
  repeated SimulationEvent generated_events = 4; // New events to be scheduled by the kernel
}

// Request from Kernel to Runtime to unload a model
message UnloadModelRequest {
  string simulation_id = 1;
  string runtime_instance_id = 2;
  string model_id = 3; // ID of the model instance to unload
}

// Response from Runtime after unloading a model
message UnloadModelResponse {
  string model_id = 1;
  bool success = 2;
  string message = 3;
}

// Request from Runtime to Kernel to schedule a new event
message ScheduleEventRequest {
  string simulation_id = 1;
  string kernel_instance_id = 2; // Target kernel instance
  SimulationEvent event = 3;
}

// Response from Kernel after scheduling an event
message ScheduleEventResponse {
  string event_id = 1; // ID assigned by the kernel to the scheduled event
  bool success = 2;
  string message = 3;
}
